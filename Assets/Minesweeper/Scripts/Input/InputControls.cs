//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Minesweeper/Scripts/Input/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""9eb1f230-8555-4e4f-8df9-dd6fd7805ae2"",
            ""actions"": [
                {
                    ""name"": ""OpenTile"",
                    ""type"": ""Value"",
                    ""id"": ""3aee4ac3-0f07-40a2-b97b-412f4a49875e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AddFlag"",
                    ""type"": ""Value"",
                    ""id"": ""fe8466ce-d6e4-4bd9-94c1-942c425fc2e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Button"",
                    ""id"": ""bc430168-c9b5-46bf-b348-a859b7fafe4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f3270830-a65e-485f-9299-4dd9f92af41e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenTile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cefa59b5-9786-4d0b-bf41-b91d724571e1"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddFlag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95e19fbe-7bad-4f4e-862e-0c13e0db7f18"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_OpenTile = m_Game.FindAction("OpenTile", throwIfNotFound: true);
        m_Game_AddFlag = m_Game.FindAction("AddFlag", throwIfNotFound: true);
        m_Game_MousePosition = m_Game.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private IGameActions m_GameActionsCallbackInterface;
    private readonly InputAction m_Game_OpenTile;
    private readonly InputAction m_Game_AddFlag;
    private readonly InputAction m_Game_MousePosition;
    public struct GameActions
    {
        private @InputControls m_Wrapper;
        public GameActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenTile => m_Wrapper.m_Game_OpenTile;
        public InputAction @AddFlag => m_Wrapper.m_Game_AddFlag;
        public InputAction @MousePosition => m_Wrapper.m_Game_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void SetCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterface != null)
            {
                @OpenTile.started -= m_Wrapper.m_GameActionsCallbackInterface.OnOpenTile;
                @OpenTile.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnOpenTile;
                @OpenTile.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnOpenTile;
                @AddFlag.started -= m_Wrapper.m_GameActionsCallbackInterface.OnAddFlag;
                @AddFlag.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnAddFlag;
                @AddFlag.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnAddFlag;
                @MousePosition.started -= m_Wrapper.m_GameActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_GameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OpenTile.started += instance.OnOpenTile;
                @OpenTile.performed += instance.OnOpenTile;
                @OpenTile.canceled += instance.OnOpenTile;
                @AddFlag.started += instance.OnAddFlag;
                @AddFlag.performed += instance.OnAddFlag;
                @AddFlag.canceled += instance.OnAddFlag;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public GameActions @Game => new GameActions(this);
    public interface IGameActions
    {
        void OnOpenTile(InputAction.CallbackContext context);
        void OnAddFlag(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
